eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgdGVzdF9idWlsZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGFwayBhZGQgLS1uby1jYWNoZSBiYXNoIHNlZCBncmVwIGJjIGNvcmV1dGlscwogICAgICAtIC4vY2ktYnVpbGQuc2gKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgcHVsbF9yZXF1ZXN0LCB0YWddCiAgCiAgYnVpbGRfY2xhbWF2OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGNsYW1hdiAuCiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAogIAogIGJ1aWxkX2NsYW1hdi1yZXN0OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGNsYW1hdi1yZXN0IGNsYW1hdi1yZXN0CiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAogIAogIGNsYW1hdl90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK2Ryb25lIiAtcD0ke0NMQU1BVl9SRVBPX1RPS0VOfSBxdWF5LmlvCiAgICAgIC0gZG9ja2VyIHRhZyBjbGFtYXYgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2NsYW1hdjoke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2NsYW1hdjoke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBicmFuY2g6IG1hc3RlcgogICAgICBldmVudDogcHVzaAogIAogIGNsYW1hdi1yZXN0X3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrZHJvbmUiIC1wPSR7Q0xBTUFWX1JFUE9fVE9LRU59IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIGNsYW1hdi1yZXN0IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9jbGFtYXYtcmVzdDoke0RST05FX0NPTU1JVF9TSEF9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2NsYW1hdi1yZXN0OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCiAgCiAgdHJpZ2dlcl9kZXBsb3lfdG9fcGxhdGZvcm0tc2VydmljZXNfZGV2OgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZDp2MC4yLjIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBrZCAtLWluc2VjdXJlLXNraXAtdGxzLXZlcmlmeSAtLW5hbWVzcGFjZT12aXJ1cy1zY2FuIC0ta3ViZS1zZXJ2ZXI9aHR0cHM6Ly9rdWJlLWRldi5kc3Aubm90cHJvZC5ob21lb2ZmaWNlLmdvdi51ayAtLXJldHJpZXMgNTAgLS1rdWJlLXRva2VuPSR7S1VCRV9UT0tFTl9ERVZ9IC0tZmlsZSBrOHMvY2xhbWQtYXBpLnlhbWwKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIGV2ZW50OiBwdXNoCgogIGJ1aWxkX2NsYW1hdjoKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtdCBjbGFtYXYgLgogICAgd2hlbjoKICAgICAgZXZlbnQ6IHRhZwogIAogIGJ1aWxkX2NsYW1hdi1yZXN0OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGNsYW1hdi1yZXN0IGNsYW1hdi1yZXN0CiAgICB3aGVuOgogICAgICBldmVudDogdGFnCiAgCiAgY2xhbWF2X3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrZHJvbmUiIC1wPSR7Q0xBTUFWX1JFUE9fVE9LRU59IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIGNsYW1hdiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvY2xhbWF2OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvY2xhbWF2OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgIHdoZW46CiAgICAgIGV2ZW50OiB0YWcKICAKICBjbGFtYXYtcmVzdF90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK2Ryb25lIiAtcD0ke0NMQU1BVl9SRVBPX1RPS0VOfSBxdWF5LmlvCiAgICAgIC0gZG9ja2VyIHRhZyBjbGFtYXYtcmVzdCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvY2xhbWF2LXJlc3Q6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9jbGFtYXYtcmVzdDoke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBldmVudDogdGFnCiAgCiAgdHJpZ2dlcl9kZXBsb3lfdG9fcGxhdGZvcm0tc2VydmljZXNfZGV2OgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZDp2MC4yLjIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBrZCAtLWluc2VjdXJlLXNraXAtdGxzLXZlcmlmeSAtLW5hbWVzcGFjZT12aXJ1cy1zY2FuIC0ta3ViZS1zZXJ2ZXI9aHR0cHM6Ly9rdWJlLWRldi5kc3Aubm90cHJvZC5ob21lb2ZmaWNlLmdvdi51ayAtLXJldHJpZXMgNTAgLS1rdWJlLXRva2VuPSR7S1VCRV9UT0tFTl9ERVZ9IC0tZmlsZSBrOHMvY2xhbWQtYXBpLnlhbWwKICAgIHdoZW46CiAgICAgIGV2ZW50OiB0YWcKCiAgdHJpZ2dlcl9kZXBsb3lfdG9fcGxhdGZvcm0tc2VydmljZXNfcHJvZDoKICAgIGltYWdlOiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2Q6djAuMi4yCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0ga2QgLS1pbnNlY3VyZS1za2lwLXRscy12ZXJpZnkgLS1uYW1lc3BhY2U9dmlydXMtc2NhbiAtLWt1YmUtc2VydmVyPWh0dHBzOi8va3ViZS5kc3AuZGlnaXRhbC5ob21lb2ZmaWNlLmdvdi51ayAtLXJldHJpZXMgNTAgLS1rdWJlLXRva2VuPSR7S1VCRV9UT0tFTl9QUk9EfSAtLWZpbGUgazhzL2NsYW1kLWFwaS55YW1sCiAgICB3aGVuOgogICAgICBldmVudDogdGFnCiAgICAgIApzZXJ2aWNlczoKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjoxLjExLWRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGNvbW1hbmQ6CiAgICAgIC0gIi1zIgogICAgICAtICJvdmVybGF5Igo.nR6Vksq5w77hlFOep2-Om8GyOnzK5fwOlEpGlUz9QKE