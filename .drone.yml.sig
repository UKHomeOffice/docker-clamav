eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgdGVzdF9idWlsZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGFwayBhZGQgLS1uby1jYWNoZSBiYXNoIHNlZCBncmVwIGJjIGNvcmV1dGlscwogICAgICAtIC4vY2ktYnVpbGQuc2gKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbcHVzaCwgcHVsbF9yZXF1ZXN0LCB0YWddCgogIGJ1aWxkX2NsYW1hdjoKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBidWlsZCAtdCBjbGFtYXYgLgogICAgd2hlbjoKICAgICAgYnJhbmNoOiBbbWFzdGVyLCByZWZzL3RhZ3MvKl0KICAgICAgZXZlbnQ6IFtwdXNoLCB0YWddCgogIGJ1aWxkX2NsYW1hdi1yZXN0OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGNsYW1hdi1yZXN0IGNsYW1hdi1yZXN0CiAgICB3aGVuOgogICAgICBicmFuY2g6IFttYXN0ZXIsIHJlZnMvdGFncy8qXQogICAgICBldmVudDogW3B1c2gsIHRhZ10KCiAgY2xhbWF2X3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrZHJvbmUiIC1wPSR7Q0xBTUFWX1JFUE9fVE9LRU59IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIGNsYW1hdiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvY2xhbWF2OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvY2xhbWF2OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgIHdoZW46CiAgICAgIGJyYW5jaDogW21hc3RlciwgcmVmcy90YWdzLypdCiAgICAgIGV2ZW50OiBbcHVzaCwgdGFnXQoKICBjbGFtYXYtcmVzdF90b19xdWF5OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGxvZ2luIC11PSJ1a2hvbWVvZmZpY2VkaWdpdGFsK2Ryb25lIiAtcD0ke0NMQU1BVl9SRVBPX1RPS0VOfSBxdWF5LmlvCiAgICAgIC0gZG9ja2VyIHRhZyBjbGFtYXYtcmVzdCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvY2xhbWF2LXJlc3Q6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgICAtIGRvY2tlciBwdXNoIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9jbGFtYXYtcmVzdDoke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBicmFuY2g6IFttYXN0ZXIsIHJlZnMvdGFncy8qXQogICAgICBldmVudDogW3B1c2gsIHRhZ10KCiAgdHJpZ2dlcl9kZXBsb3lfdG9fcGxhdGZvcm0tc2VydmljZXNfZGV2OgogICAgaW1hZ2U6IHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZDp2MC4yLjIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBrZCAtLWluc2VjdXJlLXNraXAtdGxzLXZlcmlmeSAtLW5hbWVzcGFjZT12aXJ1cy1zY2FuIC0ta3ViZS1zZXJ2ZXI9aHR0cHM6Ly9rdWJlLWRldi5kc3Aubm90cHJvZC5ob21lb2ZmaWNlLmdvdi51ayAtLXJldHJpZXMgNTAgLS1rdWJlLXRva2VuPSR7S1VCRV9UT0tFTl9ERVZ9IC0tZmlsZSBrOHMvY2xhbWQtYXBpLnlhbWwgLS1maWxlIGs4cy9jbGFtZC1zdmMueWFtbAogICAgd2hlbjoKICAgICAgYnJhbmNoOiBtYXN0ZXIKICAgICAgZXZlbnQ6IHB1c2gKCiAgYnVpbGRfY2xhbWF2OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGNsYW1hdiAuCiAgICB3aGVuOgogICAgICBldmVudDogdGFnCgogIGJ1aWxkX2NsYW1hdi1yZXN0OgogICAgaW1hZ2U6IGRvY2tlcjoxLjExCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGNsYW1hdi1yZXN0IGNsYW1hdi1yZXN0CiAgICB3aGVuOgogICAgICBldmVudDogdGFnCiAgY2xhbWF2X3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTEKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrZHJvbmUiIC1wPSR7Q0xBTUFWX1JFUE9fVE9LRU59IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIGNsYW1hdiBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvY2xhbWF2OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvY2xhbWF2OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgIHdoZW46CiAgICAgIGV2ZW50OiB0YWcKCiAgY2xhbWF2LXJlc3RfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXI6MS4xMQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtkcm9uZSIgLXA9JHtDTEFNQVZfUkVQT19UT0tFTn0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgY2xhbWF2LXJlc3QgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2NsYW1hdi1yZXN0OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwvY2xhbWF2LXJlc3Q6JHtEUk9ORV9DT01NSVRfU0hBfQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHRhZwoKICB0cmlnZ2VyX2RlcGxveV90b19wbGF0Zm9ybS1zZXJ2aWNlc19kZXY6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tkOnYwLjIuMgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGtkIC0taW5zZWN1cmUtc2tpcC10bHMtdmVyaWZ5IC0tbmFtZXNwYWNlPXZpcnVzLXNjYW4gLS1rdWJlLXNlcnZlcj1odHRwczovL2t1YmUtZGV2LmRzcC5ub3Rwcm9kLmhvbWVvZmZpY2UuZ292LnVrIC0tcmV0cmllcyA1MCAtLWt1YmUtdG9rZW49JHtLVUJFX1RPS0VOX0RFVn0gLS1maWxlIGs4cy9jbGFtZC1hcGkueWFtbCAtLWZpbGUgazhzL2NsYW1kLXN2Yy55YW1sCiAgICB3aGVuOgogICAgICBldmVudDogdGFnCgogIHRyaWdnZXJfZGVwbG95X3RvX3BsYXRmb3JtLXNlcnZpY2VzX3Byb2Q6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tkOnYwLjIuMgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGtkIC0taW5zZWN1cmUtc2tpcC10bHMtdmVyaWZ5IC0tbmFtZXNwYWNlPXZpcnVzLXNjYW4gLS1rdWJlLXNlcnZlcj1odHRwczovL2t1YmUuZHNwLmRpZ2l0YWwuaG9tZW9mZmljZS5nb3YudWsgLS1yZXRyaWVzIDUwIC0ta3ViZS10b2tlbj0ke0tVQkVfVE9LRU5fUFJPRH0gLS1maWxlIGs4cy9jbGFtZC1hcGkueWFtbCAtLWZpbGUgazhzL2NsYW1kLXN2Yy55YW1sCiAgICB3aGVuOgogICAgICBldmVudDogdGFnCgpzZXJ2aWNlczoKICBkaW5kOgogICAgaW1hZ2U6IGRvY2tlcjoxLjExLWRpbmQKICAgIHByaXZpbGVnZWQ6IHRydWUKICAgIGNvbW1hbmQ6CiAgICAgIC0gIi1zIgogICAgICAtICJvdmVybGF5Igo.5X1JqTMZ1tl9qmMe-cDTJ_wRi7yqReVD2kW0MGNVnHA